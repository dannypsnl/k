var documenterSearchIndex = {"docs":
[{"location":"#k-theorem-prover","page":"k theorem prover","title":"k theorem prover","text":"","category":"section"},{"location":"","page":"k theorem prover","title":"k theorem prover","text":"Notes for k theorem prover.","category":"page"},{"location":"#Introduction","page":"k theorem prover","title":"Introduction","text":"","category":"section"},{"location":"","page":"k theorem prover","title":"k theorem prover","text":"A theorem prover based on type theory, means a programming language that implies dependent type, then do not allow some illed-types by checking the definition. To get start, famous Mini-TT is a great resource, it demonstrate a very simple language that can be understood by many.","category":"page"},{"location":"#Peano-axioms","page":"k theorem prover","title":"Peano axioms","text":"","category":"section"},{"location":"","page":"k theorem prover","title":"k theorem prover","text":"Peano is a formation about natural number, in k you can define a data type like the following","category":"page"},{"location":"","page":"k theorem prover","title":"k theorem prover","text":"(data Nat : Type\n  [z : Nat]\n  [s (n : Nat) : Nat])","category":"page"},{"location":"termination-check/#Termination-check","page":"Termination check","title":"Termination check","text":"","category":"section"},{"location":"termination-check/#sized-type","page":"Termination check","title":"sized type","text":"","category":"section"},{"location":"termination-check/","page":"Termination check","title":"Termination check","text":"paper","category":"page"},{"location":"termination-check/","page":"Termination check","title":"Termination check","text":"Sized types are a modular and theoretically well-understood tool for checking termination of recursive and productivity of corecursive definitions. The essential idea is to track structural descent and guardedness in the type system to make termination checking robust and suitable for strong abstractions like higher-order functions and polymorphism. To study the application of sized types to proof assistants and programming languages based on dependent type theory, we have implemented a core language, MiniAgda, with explicit handling of sizes. New considerations were necessary to soundly integrate sized types with dependencies and pattern matching, which was made possible by concepts such as inaccessible patterns and parametric function spaces. This paper provides an introduction to MiniAgda by example and informal explanations of the underlying principles","category":"page"},{"location":"termination-check/","page":"Termination check","title":"Termination check","text":"video Towards a Syntactic Model of Sized Dependent Types","category":"page"}]
}
